<UserControl x:Class="PizzaNetControls.ViewModels.ClientSettingsViewModel"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:clr="clr-namespace:System;assembly=mscorlib"
             xmlns:PizzaNetValidation="clr-namespace:PizzaNetControls.Validation"
             xmlns:PizzaNetConverters="clr-namespace:PizzaNetControls.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="700" d:DesignWidth="1000">
    <UserControl.Resources>
        <PizzaNetConverters:IsStringEmptyConverter x:Key="isStringEmptyConverter"/>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid.Resources>
            <Style TargetType="{x:Type DockPanel}">
                <Setter Property="Margin" Value="0, 5, -5, 5"/>
            </Style>
            <Style TargetType="{x:Type TextBlock}">
                <Setter Property="Width" Value="130"/>
            </Style>
            <Style TargetType="{x:Type TextBox}">
                <Setter Property="DockPanel.Dock" Value="Right"/>
                <Setter Property="Width" Value="130"/>
                <Setter Property="TextAlignment" Value="Left"/>
            </Style>
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="DockPanel.Dock" Value="Right"/>
                <Setter Property="Width" Value="130"/>
            </Style>
            <Style x:Key="passwordBoxStyle" TargetType="{x:Type PasswordBox}">
                <Setter Property="DockPanel.Dock" Value="Right"/>
                <Setter Property="Width" Value="130"/>
            </Style>
        </Grid.Resources>
        <StackPanel Margin="30" Grid.Column="0" Grid.Row="0">
            <DockPanel>
                <TextBlock Text="Id:"/>
                <TextBox IsReadOnly="True" Text="{Binding ClientSettingsView.User.UserID}"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Name:"/>
                <TextBox Text="{Binding ClientSettingsView.User.Name}"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Phone:"/>
                <TextBox Text="{Binding ClientSettingsView.User.Phone}"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Address:"/>
                <TextBox Text="{Binding ClientSettingsView.User.Address}"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Email:"/>
                <TextBox Text="{Binding ClientSettingsView.User.Email}"/>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Rights:"/>
                <TextBox IsReadOnly="True" Text="{Binding ClientSettingsView.User.Rights}"/>
            </DockPanel>
            <Button Margin="20" Grid.Column="0" Click="SettingsButtonApply_Click">
                Apply
            </Button>
        </StackPanel>
        <StackPanel Margin="30" Grid.Column="1" Grid.Row="0">
            <DockPanel>
                <TextBlock Text="Current password:"/>
                <PasswordBox Name="currentPasswordInput" GotFocus="inputGotFocus"
                             PizzaNetValidation:PasswordHelper.Attach="True">
                    <PizzaNetValidation:PasswordHelper.Password>
                        <Binding NotifyOnValidationError="True"
                                 Path="CurrentPassword"
                                 Mode="TwoWay">
                            <Binding.ValidationRules>
                                <PizzaNetValidation:PasswordEqualRule Validation="newPasswordInput_Validation">
                                    <PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                                        <PizzaNetValidation:PasswordConfig x:Name="currentPasswordConfig"/>
                                    </PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                                </PizzaNetValidation:PasswordEqualRule>
                            </Binding.ValidationRules>
                        </Binding>
                    </PizzaNetValidation:PasswordHelper.Password>
                </PasswordBox>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="New password:"/>
                <PasswordBox Name="newPasswordInput" GotFocus="inputGotFocus"
                             PizzaNetValidation:PasswordHelper.Attach="True">
                    <PizzaNetValidation:PasswordHelper.Password>
                        <Binding Path="NewPassword" Mode="TwoWay"/>
                    </PizzaNetValidation:PasswordHelper.Password>
                    <PasswordBox.Style>
                        <Style TargetType="PasswordBox" BasedOn="{StaticResource ResourceKey=passwordBoxStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding CurrentPassword.Length}" Value="0">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding HasCurrentValidationError}" Value="True">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </PasswordBox.Style>
                </PasswordBox>
            </DockPanel>
            <DockPanel>
                <TextBlock Text="Repeat new password:"/>
                <PasswordBox Name="newPasswordRepeatInput" GotFocus="inputGotFocus" PizzaNetValidation:PasswordHelper.Attach="True">
                    <PizzaNetValidation:PasswordHelper.Password>
                        <Binding Path="PasswordRepeated"
                                 Mode="TwoWay">
                            <Binding.ValidationRules>
                                <PizzaNetValidation:PasswordEqualRule Validation="passwordRepeatInput_Validation">
                                    <PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                                        <PizzaNetValidation:PasswordConfig x:Name="repeatedPasswordConfig" AllowEmptySource="True"/>
                                    </PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                                </PizzaNetValidation:PasswordEqualRule>
                            </Binding.ValidationRules>
                        </Binding>
                    </PizzaNetValidation:PasswordHelper.Password>
                    <PasswordBox.Style>
                        <Style TargetType="PasswordBox" BasedOn="{StaticResource ResourceKey=passwordBoxStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding NewPassword.Length}" Value="0">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding HasCurrentValidationError}" Value="True">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=newPasswordInput, Path=IsEnabled}" Value="False">
                                    <Setter Property="IsEnabled" Value="False"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </PasswordBox.Style>
                </PasswordBox>
            </DockPanel>
            <Button Margin="20" Grid.Column="1" Click="SettingsButtonSavePassword_Click">
                Save password
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Password.Length}" Value="0">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding NewPassword.Length}" Value="0">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding PasswordRepeated.Length}" Value="0">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=newPasswordRepeatInput, Path=IsEnabled}" Value="False">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=newPasswordInput, Path=IsEnabled}" Value="False">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding HasValidationError}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
        </StackPanel>
    </Grid>
</UserControl>
