<Window x:Class="PizzaNetControls.Dialogs.InputPassword"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:PizzaNetValidation="clr-namespace:PizzaNetControls.Validation"
        Title="InputDialog" Height="170" Width="350"
        ResizeMode="NoResize"
        WindowStyle="ToolWindow"
        WindowStartupLocation="CenterOwner">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock Margin="10" Name="prompt" Grid.Row="0" Grid.ColumnSpan="2" Grid.Column="0"/>
        <TextBlock Margin="10,5,10,5" Grid.Row="1" Grid.Column="0" Text="Insert password:"/>
        <PasswordBox Margin="0,5,10,5" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" Height="20" Name="input" PizzaNetValidation:PasswordHelper.Attach="True">
            <PizzaNetValidation:PasswordHelper.Password>
                <Binding Path="NewPassword" Mode="TwoWay"/>
            </PizzaNetValidation:PasswordHelper.Password>
        </PasswordBox>
        <TextBlock Margin="10,5,10,5" Grid.Row="2" Grid.Column="0" Text="Repeat password:"/>
        <PasswordBox Margin="0,5,10,5" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Height="20" 
                     Name="repeatInput" PizzaNetValidation:PasswordHelper.Attach="True">
            <PizzaNetValidation:PasswordHelper.Password>
                <Binding Path="PasswordRepeated" Mode="TwoWay">
                    <Binding.ValidationRules>
                        <PizzaNetValidation:PasswordEqualRule Validation="passwordRepeatInput_Validation">
                            <PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                                <PizzaNetValidation:PasswordConfig x:Name="repeatedPasswordConfig" AllowEmptySource="True"/>
                            </PizzaNetValidation:PasswordEqualRule.PasswordConfig>
                        </PizzaNetValidation:PasswordEqualRule>
                    </Binding.ValidationRules>
                </Binding>
            </PizzaNetValidation:PasswordHelper.Password>
            <PasswordBox.Resources>
                <Style TargetType="{x:Type PasswordBox}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding NewPassword.Length}" Value="0">
                            <Setter Property="IsEnabled" Value="False"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </PasswordBox.Resources>
        </PasswordBox>

        <StackPanel Grid.Column="2" Grid.Row="0">
            <StackPanel.Resources>
                <Style x:Key="btnStyle" TargetType="{x:Type Button}">
                    <Setter Property="Height" Value="20"/>
                    <Setter Property="Width" Value="80"/>
                    <Setter Property="Margin" Value="10,5,10,5"/>
                </Style>
            </StackPanel.Resources>
            <Button Name="ok" Click="ok_Click" IsDefault="True">
                OK
                <Button.Resources>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=btnStyle}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding NewPassword.Length}" Value="0">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding PasswordRepeated.Length}" Value="0">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=repeatInput, Path=IsEnabled}" Value="False">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding HasValidationError}" Value="True">
                                <Setter Property="IsEnabled" Value="False"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Resources>
            </Button>
            <Button Name="cancel" Click="cancel_Click" Style="{StaticResource ResourceKey=btnStyle}">
                Cancel
            </Button>
        </StackPanel>
    </Grid>
</Window>
